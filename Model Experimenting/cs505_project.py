# -*- coding: utf-8 -*-
"""CS505_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JqzA9kaK10cRtE2QZ4iCIJjCKEx5oxDa

<h1><center>Cover Letter Generator<center><h1>

---
"""


# !pip install "transformers[sentencepiece]==4.32.1" "optimum==1.12.0" "auto-gptq==0.3.2" "accelerate==0.22.0" "safetensors>=0.3.1" --upgrade

from transformers import AutoTokenizer, pipeline, logging
from auto_gptq import AutoGPTQForCausalLM, BaseQuantizeConfig
import time

model_name_or_path = "TheBloke/Llama-2-13b-Chat-GPTQ"
model_basename = "model"

use_triton = False

tokenizer = AutoTokenizer.from_pretrained(model_name_or_path, use_fast=True)

model = AutoGPTQForCausalLM.from_quantized(model_name_or_path,
        model_basename=model_basename,
        use_safetensors=True,
        trust_remote_code=True,
        device="cuda:0",
        use_triton=use_triton,
        quantize_config=None)



# Prevent printing spurious transformers error when using pipeline with AutoGPTQ
logging.set_verbosity(logging.CRITICAL)

pipe = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    max_new_tokens=512,
    temperature=0.7,
    top_p=0.95,
    repetition_penalty=1.15
)

start = time.time()

prompt = "Tell me about AI"
system_message = "You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe.  Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature. If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information."
prompt_template=f'''[INST] <<SYS>>
{system_message}
<</SYS>>

{prompt} [/INST]'''

response = pipe(prompt_template)
end = time.time()

print(response[0]["generated_text"].split("[/INST]")[1])

print(f"Total time {(end - start)/60:.2f} min")

# from google.colab import drive
# drive.mount('/content/drive')

import pandas as pd

file_path = '/content/drive/My Drive/CS505/CS505 Project/Database_prerow/Resume_data/Clear_Name_dataset.csv'
resume = pd.read_csv(file_path)

print(resume.head())

selected_resume = resume[resume['JOB NAME'] == 'Data Science Job']
selected_resume.head()

resume1 = selected_resume.iloc[3]
resume1

file_path2 = '/content/drive/My Drive/CS505/CS505 Project/Database_prerow/Job_target_data/Job_targets.csv'
job = pd.read_csv(file_path2, encoding='ISO-8859-1')

print(job.head())

job.shape

job = job.iloc[:, :28]
job.head()

selected_job = job[job.title == 'Data Scientist']
selected_job.head()

job1 = selected_job.iloc[2]
job1

def generate_cv(first_name, last_name, content, position, jd):

  prompt = f"Create a cover letter for {first_name} {last_name} based on the applicant's resume: /n{content}/n Tailor the resume to fit the position {position} of this job description: /n{jd}/n"
  system_message = "You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature. If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information."
  prompt_template=f'''[INST] <<SYS>>
  {system_message}
  <</SYS>>

  {prompt} [/INST]'''

  response = pipe(prompt_template)
  return response[0]["generated_text"].split("[/INST]")[1]

generate_cv(resume1['First Name'], resume1['Last Name'], resume1['Resume'], job1['title'], job1['description'])

def generate_cv2(first_name, last_name, content, position, jd):
  start = time.time()
  prompt = f"Create a cover letter for {first_name} {last_name} based on the applicant's resume: /n{content}/n/n Tailor the resume to fit the position {position} of this job description: /n{jd}/n/n cover letter that is professional but concise with 2 paragraphs"
  system_message = "You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature. If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information."
  prompt_template=f'''[INST] <<SYS>>
  {system_message}
  <</SYS>>

  {prompt} [/INST]'''

  response = pipe(prompt_template)
  end = time.time()
  return response[0]["generated_text"].split("[/INST]")[1]

# generate_cv2(resume1['First Name'], resume1['Last Name'], resume1['Resume'], job1['title'], job1['description'])

# import locale
# def getpreferredencoding(do_setlocale = True):
#     return "UTF-8"
# locale.getpreferredencoding = getpreferredencoding

# import subprocess
# subprocess.run(["pip", "install", "streamlit"])

# pip install -q streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile coverletter.py
import streamlit as st

st.title('Cover Letter Generator')
st.markdown("This app will generate a cover letter for you based on your resume.")

answer_container = st.container()
with answer_container:
    col1, col2, col3 = st.columns([1.5, 1.5, 1])

    response = generate_cv2(resume1['First Name'], resume1['Last Name'], resume1['Resume'], job1['title'], job1['description'])

    with col1:
      st.subheader("Candidate")
      st.write(f'Name: {resume1["First Name"]}, {resume1["Last Name"]}')
      st.write("###")
      st.write(resume1['Resume'])
    with col2:
      st.subheader("Generated Cover Letter")
      st.write(response)

    with col3:
      st.subheader("Evaluation Metrics")

# import locale
# import os

# os.environ['LC_ALL'] = 'C.UTF-8'
# os.environ['LANG'] = 'C.UTF-8'
# locale.setlocale(locale.LC_ALL, 'C.UTF-8')

# !curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
# !sudo apt-get install -y nodejs
# # !node --version
# !npm --18.17.0

# !npm audit fix

# !npm install localtunnel

# !streamlit run coverletter.py &>/content/logs.txt & curl ipv4.icanhazip.com

# !npx localtunnel --port 4000